{"id":"main.js","dependencies":[{"name":"/Users/gregwilken/code/chadnotchad/.babelrc","includedInParent":true,"mtime":1568502470146},{"name":"/Users/gregwilken/code/chadnotchad/package.json","includedInParent":true,"mtime":1568572563000},{"name":"./styles/main.scss","loc":{"line":1,"column":7},"parent":"/Users/gregwilken/code/chadnotchad/src/main.js","resolved":"/Users/gregwilken/code/chadnotchad/src/styles/main.scss"},{"name":"face-api.js","loc":{"line":2,"column":25},"parent":"/Users/gregwilken/code/chadnotchad/src/main.js","resolved":"/Users/gregwilken/code/chadnotchad/node_modules/face-api.js/build/es6/index.js"},{"name":"./utils/docReady","loc":{"line":3,"column":25},"parent":"/Users/gregwilken/code/chadnotchad/src/main.js","resolved":"/Users/gregwilken/code/chadnotchad/src/utils/docReady.js"},{"name":"./scripts/logo","loc":{"line":4,"column":27},"parent":"/Users/gregwilken/code/chadnotchad/src/main.js","resolved":"/Users/gregwilken/code/chadnotchad/src/scripts/logo.js"},{"name":"axios","loc":{"line":6,"column":22},"parent":"/Users/gregwilken/code/chadnotchad/src/main.js","resolved":"/Users/gregwilken/code/chadnotchad/node_modules/axios/index.js"}],"generated":{"js":"\"use strict\";\n\nrequire(\"./styles/main.scss\");\n\nvar faceapi = _interopRequireWildcard(require(\"face-api.js\"));\n\nvar _docReady = require(\"./utils/docReady\");\n\nvar _logo = require(\"./scripts/logo\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nconst axios = require('axios');\n\nconst MODEL_URL = './models';\nconst MTCNN_OPTIONS = {\n  minFaceSize: 100 // docReady( async () => { \n  //   const videoEl = document.getElementById('inputVideo');\n  //   const canvas = document.getElementById('overlay');\n  //   const ctx = canvas.getContext('2d');\n  //   const statusDiv = document.getElementById('status')\n  //   // const faceScoreDiv = document.getElementById('face-score')\n  //   // const faceLabelDiv = document.getElementById('face-label')\n  //   await faceapi.loadSsdMobilenetv1Model(MODEL_URL)\n  //   await faceapi.loadFaceLandmarkModel(MODEL_URL)\n  //   await faceapi.loadMtcnnModel(MODEL_URL)  \n  //   await faceapi.loadFaceRecognitionModel(MODEL_URL)\n  //   statusDiv.innerHTML = 'Models loaded.'\n  //   let res = await axios.get('/data.json')\n  //   let labeledFaceDescriptors = await Promise.all(\n  //       res.data.map(async elem => {\n  //         let arr = new Float32Array( Object.values(elem._descriptors[0]) )\n  //         return new faceapi.LabeledFaceDescriptors(elem._label, [arr])\n  //       })\n  //     )\n  //   statusDiv.innerHTML = 'Face Descriptors loaded.'\n  //   navigator.getUserMedia(\n  //     { \n  //       video: {} \n  //     },\n  //     stream => videoEl.srcObject = stream,\n  //     err => console.error(err)\n  //   )\n  // const options = new faceapi.MtcnnOptions(MTCNN_OPTIONS)\n  // const maxDescriptorDistance = 0.6\n  // const faceMatcher = new faceapi.FaceMatcher(labeledFaceDescriptors, maxDescriptorDistance)\n  // statusDiv.innerHTML = 'Face Matcher loaded.'\n  // const detect = async () => {\n  //   statusDiv.innerHTML = 'Detecting...'\n  //   const results = await faceapi.detectAllFaces(videoEl, options).withFaceLandmarks().withFaceDescriptors()\n  //   if (results) {\n  //     results.forEach(result => {      \n  //       // faceScoreDiv.innerHTML = `face detected score: ${result.detection.score}`\n  //       ctx.clearRect(0, 0, 640, 480)\n  //       let dims = faceapi.matchDimensions(videoEl, canvas)\n  //       let faceDescription = faceapi.resizeResults(result, dims)\n  //       const matchResults = faceMatcher.findBestMatch(faceDescription.descriptor)\n  //       const box = faceDescription.detection.box\n  //       let text = matchResults.label\n  //       if (text === 'unknown') {\n  //         text = 'not chad'\n  //       }\n  //       // faceLabelDiv.innerHTML = `best match: ${text}`\n  //       const drawBox = new faceapi.draw.DrawBox(\n  //         box, \n  //         { \n  //           label: text, \n  //           lineWidth: 2, \n  //           boxColor: 'yellow',\n  //           drawLabelOptions: {\n  //             fontColor: 'black',\n  //             fontSize: 36,\n  //             fontStyle: 'Pacifico',\n  //             padding: 6\n  //           } \n  //         }\n  //       )\n  //       drawBox.draw(canvas)\n  //     })\n  //   }\n  //   requestAnimationFrame(detect);\n  //  }\n  //   videoEl.onplay = detect\n  //   consoleArt()\n  // });\n\n};"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"main.js","original":{"line":1,"column":0}},{"generated":{"line":5,"column":0},"source":"main.js","original":{"line":2,"column":0}},{"generated":{"line":7,"column":0},"source":"main.js","original":{"line":3,"column":0}},{"generated":{"line":9,"column":0},"source":"main.js","original":{"line":4,"column":0}},{"generated":{"line":15,"column":0},"source":"main.js","original":{"line":6,"column":0}},{"name":"axios","generated":{"line":15,"column":6},"source":"main.js","original":{"line":6,"column":6}},{"generated":{"line":15,"column":11},"source":"main.js","original":{"line":6,"column":11}},{"name":"require","generated":{"line":15,"column":14},"source":"main.js","original":{"line":6,"column":14}},{"generated":{"line":15,"column":21},"source":"main.js","original":{"line":6,"column":21}},{"generated":{"line":15,"column":22},"source":"main.js","original":{"line":6,"column":22}},{"generated":{"line":15,"column":29},"source":"main.js","original":{"line":6,"column":21}},{"generated":{"line":15,"column":30},"source":"main.js","original":{"line":6,"column":0}},{"generated":{"line":17,"column":0},"source":"main.js","original":{"line":8,"column":0}},{"name":"MODEL_URL","generated":{"line":17,"column":6},"source":"main.js","original":{"line":8,"column":6}},{"generated":{"line":17,"column":15},"source":"main.js","original":{"line":8,"column":15}},{"generated":{"line":17,"column":18},"source":"main.js","original":{"line":8,"column":18}},{"generated":{"line":17,"column":28},"source":"main.js","original":{"line":8,"column":0}},{"generated":{"line":18,"column":0},"source":"main.js","original":{"line":9,"column":0}},{"name":"MTCNN_OPTIONS","generated":{"line":18,"column":6},"source":"main.js","original":{"line":9,"column":6}},{"generated":{"line":18,"column":19},"source":"main.js","original":{"line":9,"column":19}},{"generated":{"line":18,"column":22},"source":"main.js","original":{"line":9,"column":22}},{"name":"minFaceSize","generated":{"line":19,"column":0},"source":"main.js","original":{"line":9,"column":24}},{"name":"minFaceSize","generated":{"line":19,"column":2},"source":"main.js","original":{"line":9,"column":24}},{"generated":{"line":19,"column":13},"source":"main.js","original":{"line":9,"column":35}},{"generated":{"line":19,"column":15},"source":"main.js","original":{"line":9,"column":37}},{"generated":{"line":19,"column":18},"source":"main.js","original":{"line":9,"column":22}},{"generated":{"line":19,"column":19},"source":"main.js","original":{"line":12,"column":0}},{"generated":{"line":20,"column":0},"source":"main.js","original":{"line":13,"column":0}},{"generated":{"line":21,"column":0},"source":"main.js","original":{"line":14,"column":0}},{"generated":{"line":22,"column":0},"source":"main.js","original":{"line":15,"column":0}},{"generated":{"line":23,"column":0},"source":"main.js","original":{"line":17,"column":0}},{"generated":{"line":24,"column":0},"source":"main.js","original":{"line":18,"column":0}},{"generated":{"line":25,"column":0},"source":"main.js","original":{"line":19,"column":0}},{"generated":{"line":26,"column":0},"source":"main.js","original":{"line":21,"column":0}},{"generated":{"line":27,"column":0},"source":"main.js","original":{"line":22,"column":0}},{"generated":{"line":28,"column":0},"source":"main.js","original":{"line":23,"column":0}},{"generated":{"line":29,"column":0},"source":"main.js","original":{"line":24,"column":0}},{"generated":{"line":30,"column":0},"source":"main.js","original":{"line":26,"column":0}},{"generated":{"line":31,"column":0},"source":"main.js","original":{"line":29,"column":0}},{"generated":{"line":32,"column":0},"source":"main.js","original":{"line":31,"column":0}},{"generated":{"line":33,"column":0},"source":"main.js","original":{"line":32,"column":0}},{"generated":{"line":34,"column":0},"source":"main.js","original":{"line":33,"column":0}},{"generated":{"line":35,"column":0},"source":"main.js","original":{"line":34,"column":0}},{"generated":{"line":36,"column":0},"source":"main.js","original":{"line":35,"column":0}},{"generated":{"line":37,"column":0},"source":"main.js","original":{"line":36,"column":0}},{"generated":{"line":38,"column":0},"source":"main.js","original":{"line":38,"column":0}},{"generated":{"line":39,"column":0},"source":"main.js","original":{"line":40,"column":0}},{"generated":{"line":40,"column":0},"source":"main.js","original":{"line":41,"column":0}},{"generated":{"line":41,"column":0},"source":"main.js","original":{"line":42,"column":0}},{"generated":{"line":42,"column":0},"source":"main.js","original":{"line":43,"column":0}},{"generated":{"line":43,"column":0},"source":"main.js","original":{"line":44,"column":0}},{"generated":{"line":44,"column":0},"source":"main.js","original":{"line":45,"column":0}},{"generated":{"line":45,"column":0},"source":"main.js","original":{"line":46,"column":0}},{"generated":{"line":46,"column":0},"source":"main.js","original":{"line":48,"column":0}},{"generated":{"line":47,"column":0},"source":"main.js","original":{"line":49,"column":0}},{"generated":{"line":48,"column":0},"source":"main.js","original":{"line":50,"column":0}},{"generated":{"line":49,"column":0},"source":"main.js","original":{"line":52,"column":0}},{"generated":{"line":50,"column":0},"source":"main.js","original":{"line":54,"column":0}},{"generated":{"line":51,"column":0},"source":"main.js","original":{"line":55,"column":0}},{"generated":{"line":52,"column":0},"source":"main.js","original":{"line":57,"column":0}},{"generated":{"line":53,"column":0},"source":"main.js","original":{"line":59,"column":0}},{"generated":{"line":54,"column":0},"source":"main.js","original":{"line":60,"column":0}},{"generated":{"line":55,"column":0},"source":"main.js","original":{"line":61,"column":0}},{"generated":{"line":56,"column":0},"source":"main.js","original":{"line":63,"column":0}},{"generated":{"line":57,"column":0},"source":"main.js","original":{"line":65,"column":0}},{"generated":{"line":58,"column":0},"source":"main.js","original":{"line":66,"column":0}},{"generated":{"line":59,"column":0},"source":"main.js","original":{"line":68,"column":0}},{"generated":{"line":60,"column":0},"source":"main.js","original":{"line":69,"column":0}},{"generated":{"line":61,"column":0},"source":"main.js","original":{"line":70,"column":0}},{"generated":{"line":62,"column":0},"source":"main.js","original":{"line":72,"column":0}},{"generated":{"line":63,"column":0},"source":"main.js","original":{"line":73,"column":0}},{"generated":{"line":64,"column":0},"source":"main.js","original":{"line":74,"column":0}},{"generated":{"line":65,"column":0},"source":"main.js","original":{"line":76,"column":0}},{"generated":{"line":66,"column":0},"source":"main.js","original":{"line":78,"column":0}},{"generated":{"line":67,"column":0},"source":"main.js","original":{"line":79,"column":0}},{"generated":{"line":68,"column":0},"source":"main.js","original":{"line":80,"column":0}},{"generated":{"line":69,"column":0},"source":"main.js","original":{"line":81,"column":0}},{"generated":{"line":70,"column":0},"source":"main.js","original":{"line":82,"column":0}},{"generated":{"line":71,"column":0},"source":"main.js","original":{"line":83,"column":0}},{"generated":{"line":72,"column":0},"source":"main.js","original":{"line":84,"column":0}},{"generated":{"line":73,"column":0},"source":"main.js","original":{"line":85,"column":0}},{"generated":{"line":74,"column":0},"source":"main.js","original":{"line":86,"column":0}},{"generated":{"line":75,"column":0},"source":"main.js","original":{"line":87,"column":0}},{"generated":{"line":76,"column":0},"source":"main.js","original":{"line":88,"column":0}},{"generated":{"line":77,"column":0},"source":"main.js","original":{"line":89,"column":0}},{"generated":{"line":78,"column":0},"source":"main.js","original":{"line":90,"column":0}},{"generated":{"line":79,"column":0},"source":"main.js","original":{"line":91,"column":0}},{"generated":{"line":80,"column":0},"source":"main.js","original":{"line":93,"column":0}},{"generated":{"line":81,"column":0},"source":"main.js","original":{"line":94,"column":0}},{"generated":{"line":82,"column":0},"source":"main.js","original":{"line":95,"column":0}},{"generated":{"line":83,"column":0},"source":"main.js","original":{"line":96,"column":0}},{"generated":{"line":84,"column":0},"source":"main.js","original":{"line":97,"column":0}},{"generated":{"line":85,"column":0},"source":"main.js","original":{"line":99,"column":0}},{"generated":{"line":86,"column":0},"source":"main.js","original":{"line":101,"column":0}},{"generated":{"line":87,"column":0},"source":"main.js","original":{"line":102,"column":0}},{"generated":{"line":89,"column":0},"source":"main.js","original":{"line":9,"column":22}},{"generated":{"line":89,"column":1},"source":"main.js","original":{"line":9,"column":0}}],"sources":{"main.js":"import './styles/main.scss'\nimport * as faceapi from 'face-api.js';\nimport { docReady } from './utils/docReady'\nimport { consoleArt } from './scripts/logo'\n\nconst axios = require('axios')\n\nconst MODEL_URL = './models'\nconst MTCNN_OPTIONS = { minFaceSize: 100 }\n\n\n// docReady( async () => { \n//   const videoEl = document.getElementById('inputVideo');\n//   const canvas = document.getElementById('overlay');\n//   const ctx = canvas.getContext('2d');\n\n//   const statusDiv = document.getElementById('status')\n//   // const faceScoreDiv = document.getElementById('face-score')\n//   // const faceLabelDiv = document.getElementById('face-label')\n\n//   await faceapi.loadSsdMobilenetv1Model(MODEL_URL)\n//   await faceapi.loadFaceLandmarkModel(MODEL_URL)\n//   await faceapi.loadMtcnnModel(MODEL_URL)  \n//   await faceapi.loadFaceRecognitionModel(MODEL_URL)\n\n//   statusDiv.innerHTML = 'Models loaded.'\n\n\n//   let res = await axios.get('/data.json')\n  \n//   let labeledFaceDescriptors = await Promise.all(\n//       res.data.map(async elem => {\n//         let arr = new Float32Array( Object.values(elem._descriptors[0]) )\n//         return new faceapi.LabeledFaceDescriptors(elem._label, [arr])\n//       })\n//     )\n\n//   statusDiv.innerHTML = 'Face Descriptors loaded.'\n  \n//   navigator.getUserMedia(\n//     { \n//       video: {} \n//     },\n//     stream => videoEl.srcObject = stream,\n//     err => console.error(err)\n//   )\n  \n// const options = new faceapi.MtcnnOptions(MTCNN_OPTIONS)\n// const maxDescriptorDistance = 0.6\n// const faceMatcher = new faceapi.FaceMatcher(labeledFaceDescriptors, maxDescriptorDistance)\n\n// statusDiv.innerHTML = 'Face Matcher loaded.'\n\n// const detect = async () => {\n//   statusDiv.innerHTML = 'Detecting...'\n  \n//   const results = await faceapi.detectAllFaces(videoEl, options).withFaceLandmarks().withFaceDescriptors()\n\n//   if (results) {\n//     results.forEach(result => {      \n//       // faceScoreDiv.innerHTML = `face detected score: ${result.detection.score}`\n      \n//       ctx.clearRect(0, 0, 640, 480)\n      \n//       let dims = faceapi.matchDimensions(videoEl, canvas)\n//       let faceDescription = faceapi.resizeResults(result, dims)\n      \n//       const matchResults = faceMatcher.findBestMatch(faceDescription.descriptor)\n//       const box = faceDescription.detection.box\n//       let text = matchResults.label\n      \n//       if (text === 'unknown') {\n//         text = 'not chad'\n//       }\n\n//       // faceLabelDiv.innerHTML = `best match: ${text}`\n    \n//       const drawBox = new faceapi.draw.DrawBox(\n//         box, \n//         { \n//           label: text, \n//           lineWidth: 2, \n//           boxColor: 'yellow',\n//           drawLabelOptions: {\n//             fontColor: 'black',\n//             fontSize: 36,\n//             fontStyle: 'Pacifico',\n//             padding: 6\n//           } \n//         }\n//       )\n\n//       drawBox.draw(canvas)\n//     })\n//   }\n//   requestAnimationFrame(detect);\n//  }\n\n//   videoEl.onplay = detect\n\n//   consoleArt()\n// });\n"},"lineCount":null}},"error":null,"hash":"3c375b2b12c470f2707f225cdcd683f9","cacheData":{"env":{}}}